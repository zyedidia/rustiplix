local knit = require("knit")

local prefix := riscv64-unknown-elf
local target := riscv64imac-unknown-none-elf
local objdir = ".obj/"

local profile = cli.profile or "dev"
local board = cli.board or "virt"

local tools = {
    cc := $prefix-gcc
    as := $prefix-as
    ld := $prefix-ld
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
    qemu := qemu-system-riscv64
    gdb := gdb-multiarch
}

local flags = {
    as := -march=rv64imac_zicsr_zifencei -xassembler-with-cpp -mcmodel=medany -mabi=lp64
    qemu := -nographic -no-reboot -bios none -machine virt -m 2G -smp 4
    objdump := -j .text -j .data -j .rodata -j .bss -j .stack -j .heap -j .payload -d
    clippy := -D warnings -A clippy::missing-safety-doc
    cargo = "-q"
}

local src = {
    kernel = knit.rglob("kernel", "*.rs"),
    kmain = knit.rglob("kmain", "*.rs"),
    bootloader = knit.rglob("bootloader", "*.rs"),
    cargo = knit.rglob(".", "Cargo.toml") + {".cargo/config.toml"},
}

local lib = {
    bootloader = {
        payload = {"libbootloader.payload.a"},
        uart = {"libbootloader.uart.a"},
    },
    kmain = {"libkmain.a"},
}

local asm = {
    kernel = knit.extrepl(knit.rglob("kernel", "*.s"), ".s", ".asm.o"),
    kmain = knit.extrepl(knit.rglob("kmain", "*.s"), ".s", ".asm.o"),
    bootloader = knit.extrepl(knit.rglob("bootloader", "*.s"), ".s", ".asm.o"),
}

lib.bootloader.uart = knit.prefix(lib.bootloader.uart, objdir)
lib.bootloader.payload = knit.prefix(lib.bootloader.payload, objdir)
lib.kmain = knit.prefix(lib.kmain, objdir)
asm.kernel = knit.prefix(asm.kernel, objdir)
asm.kmain = knit.prefix(asm.kmain, objdir)
asm.bootloader = knit.prefix(asm.bootloader, objdir)

local link = {
    kernel = "link/virt/kernel.ld",
    bootloader = "link/virt/bootloader.ld",
}

local plboot = {
    bin = "tools/plboot/plboot",
    src = knit.glob("tools/plboot/*.go"),
}

return b{
    $ all:VB: kernel.boot.elf

    $ $(lib.bootloader.payload): $(src.bootloader) $(src.kernel) $(src.cargo)
        cargo -C bootloader build $(flags.cargo) --profile $profile --out-dir ../$objdir -Z unstable-options --no-default-features --features $board,payload
        cp $objdir/libbootloader.a $output
    $ $(lib.bootloader.uart): $(src.bootloader) $(src.kernel) $(src.cargo)
        cargo -C bootloader build $(flags.cargo) --profile $profile --out-dir ../$objdir -Z unstable-options --no-default-features --features $board,uart
        cp $objdir/libbootloader.a $output
    $ $(lib.kmain): $(src.kmain) $(src.kernel) $(src.cargo)
        cargo -C kmain build $(flags.cargo) --profile $profile --out-dir ../$objdir -Z unstable-options --no-default-features --features $board

    $ kernel.elf: $(asm.kernel) $(asm.kmain) $(lib.kmain) $(link.kernel)[I]
        $(tools.cc) -T$(link.kernel) -Wl,--gc-sections $input -o $output -nostdlib -nostdinc
    $ kernel.boot.elf: $(asm.kernel) $(asm.bootloader) $(lib.bootloader.payload) $(link.bootloader)[I]
        $(tools.cc) -T$(link.bootloader) -Wl,--gc-sections $input -o $output -nostdlib -nostdinc
    $ %.payload: %.elf $(plboot.bin)[I]
        ./$(plboot.bin) make -o $output $input

    $ bootloader.elf: $(asm.kernel) $(asm.bootloader) $(lib.bootloader.uart) $(link.bootloader)[I]
        $(tools.cc) -T$(link.bootloader) -Wl,--gc-sections $input -o $output -nostdlib -nostdinc

    $ .obj/%.asm.o: %.s
        $(tools.cc) $(flags.as) $input -c -o $output
    $ .obj/bootloader/payload.asm.o: bootloader/payload.s kernel.payload[I]
        $(tools.cc) $(flags.as) $input -c -o $output -DPAYLOAD=kernel.payload
    $ %.list: %.elf
        $(tools.objdump) $(flags.objdump) $input > $output
    $ %.bin: %.elf
        $(tools.objcopy) $input -O binary $output
    $ %.img: %.bin
        vf2-imager -i $input -o $output
    $ qemu:VB: kernel.boot.bin
        $(tools.qemu) $(flags.qemu) -kernel $input
    $ qemu-gdb:VB: kernel.boot.elf kernel.elf
        $(tools.qemu) $(flags.qemu) -kernel $(inputs[1]) -s -S &
        $(tools.gdb) -ex "file $(inputs[2])" -ex "target remote localhost:1234"

    $ prog:VB: kernel.elf $(plboot.bin)[I]
        ./$(plboot.bin) prog $input

    $ clippy:VB:
        cargo -C kmain clippy $(flags.cargo) -- $(flags.clippy)
        cargo -C bootloader clippy $(flags.cargo) -- $(flags.clippy)

    $ format:VB:
        cargo -C kmain fmt $(flags.cargo)
        cargo -C bootloader fmt $(flags.cargo)
    $ format-check:VB:
        cargo -C kmain fmt --check $(flags.cargo)
        cargo -C bootloader fmt --check $(flags.cargo)

    $ check:VB: format-check clippy

    $ doc/generated:B:
        cargo -C kernel doc $(flags.cargo)
        mv .target/$target/doc $output

    $ $(plboot.bin): $(plboot.src)
        cd tools/plboot && go build

    $ clean:VB:
        knit -t clean
        cargo -C kmain clean $(flags.cargo)
        cargo -C bootloader clean $(flags.cargo)
}
