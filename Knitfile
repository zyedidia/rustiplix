local knit = require("knit")

local prefix := riscv64-unknown-elf
local target := riscv64imac-unknown-none-elf

local tools = {
    rustc := rustc
    cc := $prefix-gcc
    as := $prefix-as
    ld := $prefix-ld
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
    qemu := qemu-system-riscv64
    gdb := gdb-multiarch
    clippy := clippy-driver
    rustfmt := rustfmt
    rustdoc := rustdoc
}

local O := s

local riscv := -C code-model=medium

local flags = {
    as := -march=rv64imac_zicsr_zifencei -xassembler-with-cpp -mcmodel=medany -mabi=lp64
    qemu := -nographic -no-reboot -bios none -machine virt -m 2G -smp 4
    objdump := -j .text -j .data -j .rodata -j .bss -j .stack -j .heap -j .payload -d
    clippy := -D warnings -A clippy::missing-safety-doc
}

local src = {
    kernel = knit.rglob("kernel", "*.rs"),
    kmain = knit.rglob("kmain", "*.rs"),
    bootloader = knit.rglob("bootloader", "*.rs"),
}

local lib = {
    bootloader = {"libbootloader.a"},
    kmain = {"libkmain.a"},
}

local asm = {
    kernel = knit.extrepl(knit.rglob("kernel", "*.s"), ".s", ".asm.o"),
    kmain = knit.extrepl(knit.rglob("kmain", "*.s"), ".s", ".asm.o"),
    bootloader = knit.extrepl(knit.rglob("bootloader", "*.s"), ".s", ".asm.o"),
}

lib.bootloader = knit.prefix(lib.bootloader, ".obj/")
lib.kmain = knit.prefix(lib.kmain, ".obj/")
asm.kernel = knit.prefix(asm.kernel, ".obj/")
asm.kmain = knit.prefix(asm.kmain, ".obj/")
asm.bootloader = knit.prefix(asm.bootloader, ".obj/")

local link = {
    kernel = "link/virt/kernel.ld",
    bootloader = "link/virt/bootloader.ld",
}

local plboot = {
    bin = "tools/plboot/plboot",
    src = knit.glob("tools/plboot/*.go"),
}

return b{
    $ all:VB: kernel.boot.elf

    $ $(lib.bootloader) $(lib.kmain): $(src.bootloader) $(src.kernel)
        cargo build --out-dir .obj -Z unstable-options

    $ kernel.elf: $(asm.kernel) $(asm.kmain) $(lib.kmain) $(link.kernel)[I]
        $(tools.cc) -T$(link.kernel) -Wl,--gc-sections $input -o $output -nostdlib -nostdinc
    $ kernel.boot.elf: $(asm.kernel) $(asm.bootloader) $(lib.bootloader) $(link.bootloader)[I]
        $(tools.cc) -T$(link.bootloader) -Wl,--gc-sections $input -o $output -nostdlib -nostdinc
    $ %.payload: %.elf $(plboot.bin)[I]
        ./$(plboot.bin) make -o $output $input

    $ .obj/%.asm.o: %.s
        $(tools.cc) $(flags.as) $input -c -o $output
    $ .obj/bootloader/payload.asm.o: bootloader/payload.s kernel.payload[I]
        $(tools.cc) $(flags.as) $input -c -o $output -DPAYLOAD=kernel.payload
    $ %.list: %.elf
        $(tools.objdump) $(flags.objdump) $input > $output
    $ %.bin: %.elf
        $(tools.objcopy) $input -O binary $output
    $ qemu:VB: kernel.boot.bin
        $(tools.qemu) $(flags.qemu) -kernel $input
    $ qemu-gdb:VB: kernel.boot.elf kernel.elf
        $(tools.qemu) $(flags.qemu) -kernel $(inputs[1]) -s -S &
        $(tools.gdb) -ex "file $(inputs[2])" -ex "target remote localhost:1234"

    $ clippy:VB:
        cargo clippy -- $(flags.clippy)

    $ format:VB:
        cargo fmt
    $ format-check:VB:
        cargo fmt --check

    $ $(plboot.bin): $(plboot.src)
        cd tools/plboot && go build
}
