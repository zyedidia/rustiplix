local knit = require("knit")

local prefix := riscv64-unknown-elf

local tools = {
    rustc := rustc
    cc := $prefix-gcc
    as := $prefix-as
    ld := $prefix-ld
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
    qemu := qemu-system-riscv64
    gdb := gdb-multiarch
}

local O := s

local flags = {
    rustc := --emit=link,obj --target riscv64imac-unknown-none-elf -C opt-level=$O --edition=2021 --crate-type lib -C code-model=medium -C incremental=.incremental -C embed-bitcode=no
    as := -march=rv64imac_zicsr_zifencei
}

local src = {
    kernel = knit.rglob("kernel", "*.rs"),
    kmain = knit.rglob("kmain", "*.rs"),
}

local obj = {
    kernel = {"libkernel.rlib"},
    kmain = {"libkmain.rlib"},
    asm = knit.extrepl(knit.rglob(".", "*.s"), ".s", ".o"),
}

obj.kernel = knit.prefix(obj.kernel, ".obj/")
obj.kmain = knit.prefix(obj.kmain, ".obj/")
obj.asm = knit.prefix(obj.asm, ".obj/asm/")

local link = "link/virt.ld"

return b{
    $ prog.elf: $(obj.asm) $(obj.kmain) $(obj.kernel) $(link)[I]
        $(tools.ld) -T$(link) $input /home/zyedidia/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib/libcore-6b8d3be6c3d1d4e7.rlib --gc-sections -o $output

    $ $(obj.kmain): $(src.kmain) $(obj.kernel)
        $(tools.rustc) $(flags.rustc) kmain/lib.rs --crate-name kmain --extern kernel=$(obj.kernel) --out-dir .obj
    $ $(obj.kernel): $(src.kernel)
        $(tools.rustc) $(flags.rustc) kernel/lib.rs --crate-name kernel --out-dir .obj

    $ .obj/asm/%.o: %.s
        $(tools.as) $(flags.as) $input -c -o $output
    $ %.list: %.elf
        $(tools.objdump) -D $input > $output
    $ %.bin: %.elf
        $(tools.objcopy) $input -O binary $output
    $ qemu:VB: prog.bin
        $(tools.qemu) -nographic -bios none -machine virt -kernel $input
    $ qemu-gdb:VB: prog.elf
        $(tools.qemu) -nographic -bios none -machine virt -kernel $input -s -S &
        $(tools.gdb) -ex "file prog.elf" -ex "target remote localhost:1234"
}
